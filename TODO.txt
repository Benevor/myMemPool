重新设计架构
设计并发，主要是现在设计的加锁太怪了
和标准的三层缓存进行对比，思考优劣
外部碎片融合？操作系统为啥可以融合
分配chunk的算法？
为什么要进行内存地址对齐？

可写
分配的一定是连续空间？
外部内存碎片
分配chunk的算法
提高并发：两层缓存，两个锁

bug
一定不要引用.cpp文件
一定要将函数的定义放在.h，对应的实现放在.cpp
注意指针相减的结果
没有共享锁？